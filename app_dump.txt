// === INICIALIZACIÃ“N Y UTILIDADES ===
const EMS_CONTACT = {
  empresa: "ELECTROMOTORES SANTANA",
  direccion: "Carr. a Chichimequillas 306, Colonia Menchaca 2, 76147 Santiago de QuerÃ©taro, Qro.",
  telefono: "cel: 442 469 9895; Tel/Fax: 4422208910",
  correo: "electromotores.santana@gmail.com"
};
const EMS_COLOR = [0.97, 0.54, 0.11]; // rgb(248,138,29) (fallback)

// Ajustes (tema/PDF) persistentes
function getSettings() {
  try {
    const raw = localStorage.getItem('EMS_SETTINGS');
    if (!raw) return {};
    return JSON.parse(raw) || {};
  } catch { return {}; }
}
function saveSettings(conf) {
  try { localStorage.setItem('EMS_SETTINGS', JSON.stringify(conf||{})); } catch {}
}
function hexToRgbArray(hex) {
  if (!hex || typeof hex !== 'string') return EMS_COLOR;
  const m = hex.replace('#','');
  if (m.length !== 6) return EMS_COLOR;
  const r = parseInt(m.slice(0,2),16)/255, g = parseInt(m.slice(2,4),16)/255, b = parseInt(m.slice(4,6),16)/255;
  return [r,g,b];
}
function getThemeRgbArray() {
  const s = getSettings();
  const hex = s?.themeColor;
  if (hex) return hexToRgbArray(hex);
  return EMS_COLOR;
}

// Aplicar tema (CSS vars y meta theme-color)
function setCssVar(name, value) {
  try { document.documentElement.style.setProperty(name, value); } catch {}
}
function shadeHex(hex, percent) {
  // percent: -1..1 (negro..blanco)
  if (!hex) return hex;
  hex = hex.replace('#','');
  if (hex.length !== 6) return '#' + hex;
  const num = parseInt(hex, 16);
  let r = (num >> 16) & 0xFF, g = (num >> 8) & 0xFF, b = num & 0xFF;
  const t = percent < 0 ? 0 : 255;
  const p = Math.abs(percent);
  r = Math.round((t - r) * p) + r;
  g = Math.round((t - g) * p) + g;
  b = Math.round((t - b) * p) + b;
  const toHex = (v)=>('0' + v.toString(16)).slice(-2);
  return '#' + toHex(Math.max(0, Math.min(255, r))) + toHex(Math.max(0, Math.min(255, g))) + toHex(Math.max(0, Math.min(255, b)));
}
function applyThemeFromSettings() {
  const s = getSettings();
  const main = (s.themeColor || '#F88A1D');
  const light = shadeHex(main, 0.25);
  setCssVar('--azul', main);
  setCssVar('--azul-claro', light);
  const meta = document.querySelector('meta[name="theme-color"]');
  if (meta) meta.setAttribute('content', main);
}

// === Firebase (tus credenciales) ===
const firebaseConfig = {
  apiKey: "AIzaSyDsXSbJWdMyBgTedntNv3ppj5GAvRUImyc",
  authDomain: "elms-26a5d.firebaseapp.com",
  projectId: "elms-26a5d",
  storageBucket: "elms-26a5d.appspot.com",
  messagingSenderId: "822211669634",
  appId: "1:822211669634:web:9eeb32d9efae360713ce9b"
};
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();

// === Cloudinary usado en reportes/cotizaciÃ³n ===
const CLOUDINARY_CLOUD = "ds9b1mczi";
const CLOUDINARY_PRESET = "ml_default";

// Usa Ã­cono local para coherencia con GH Pages e Ã­cono de pestaÃ±a
const LOGO_URL = "./icons/icon-192.png";

// Estado de secciones para CotizaciÃ³n (en DOM, pero guardamos helpers)
let cotSeccionesTemp = [];

// â¬‡â¬‡ IMPORTANTE: fotos por ÃTEM con ID estable (no por Ã­ndice)
let fotosItemsReporteMap = {}; // { [rowId]: string[] }
let fotosCotizacion = []; // Hasta 5 fotos por cotizaciÃ³n
let autoSaveTimer = null;

// ---- Helpers generales ----
function safe(val) { return (val === undefined || val === null) ? "" : String(val); }
function formatMoney(val) { return "$" + Number(val || 0).toLocaleString("en-US", { minimumFractionDigits: 2, maximumFractionDigits: 2 }); }
function hoy() { return (new Date()).toISOString().slice(0, 10); }
function ahora() { const d = new Date(); return d.toTimeString().slice(0, 5); }
function newUID(){ return 'i' + Math.random().toString(36).slice(2,9) + Date.now().toString(36).slice(-4); }

function mostrarPrecio(val) {
  if (val === undefined || val === null) return "";
  if (typeof val === "string" && (val.trim() === "." || val.trim() === "-")) return "";
  if (isNaN(Number(val)) || val === "") return "";
  return "$" + Number(val).toLocaleString("en-US", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
}
function mostrarPrecioLimpio(val) {
  if (val === undefined || val === null) return "";
  if (typeof val === "string" && (val.trim() === "." || val.trim() === "-")) return "";
  if (isNaN(Number(val)) || val === "") return "";
  return "$" + Number(val).toLocaleString("en-US", { minimumFractionDigits: 2, maximumFractionDigits: 2 });
}

// Barra de progreso
function showProgress(visible = true, percent = 0, msg = '') {
  let bar = document.getElementById('progress-bar');
  if (!bar) {
    bar = document.createElement('div');
    bar.id = 'progress-bar';
    bar.style.display = 'flex';
    bar.style.alignItems = 'center';
    bar.style.justifyContent = 'center';
    bar.style.position = 'fixed';
    bar.style.left = '0';
    bar.style.top = '0';
    bar.style.width = '100vw';
    bar.style.height = '5px';
    bar.style.background = '#26B77A';
    bar.style.zIndex = '1200';
    bar.innerHTML = '';
    document.body.appendChild(bar);
  }
  let inner = bar.querySelector('.progress-inner');
  if (!inner) {
    inner = document.createElement('div');
    inner.className = 'progress-inner';
    inner.style.height = '100%';
    inner.style.width = percent + '%';
    inner.innerText = msg;
    bar.appendChild(inner);
  }
  bar.style.display = visible ? 'flex' : 'none';
  inner.style.width = percent + '%';
  inner.innerText = msg || (visible ? '' : '');

  // Busy mask to block interactions
  var mask = document.getElementById('ems-busy-mask');
  if (!mask) {
    mask = document.createElement('div');
    mask.id = 'ems-busy-mask';
    mask.className = 'ems-busy-mask';
    mask.innerHTML = '<div class=\'spinner\'>Cargandoâ€¦</div>';
    document.body.appendChild(mask);
  }
  // Garantizar overlay limpio y dinÃ¡mico con puntos y texto
  try {
    var _box = mask.querySelector('.ems-busy-box');
    if (!_box) {
      mask.innerHTML = "<div class='ems-busy-box'><div class='ems-dots'><span class='ems-dot'></span><span class='ems-dot'></span><span class='ems-dot'></span></div><span class='ems-busy-text' role='status' aria-live='polite'></span></div>";
      _box = mask.querySelector('.ems-busy-box');
    }
    var _txt = mask.querySelector('.ems-busy-text');
    if (_txt) _txt.textContent = msg || 'Cargandoâ€¦';
  } catch (e) {}
  if (visible) { mask.classList.add('show'); } else { mask.classList.remove('show'); }
}

function showSaved(msg = "Guardado") {
  let el = document.getElementById("saved-banner");
  if (!el) {
    el = document.createElement("div");
    el.id = "saved-banner";
    el.style.position = "fixed";
    el.style.bottom = "28px";
    el.style.right = "32px";
    el.style.background = "#26B77A";
    el.style.color = "#fff";
    el.style.padding = "12px 32px";
    el.style.borderRadius = "16px";
    el.style.fontWeight = "bold";
    el.style.zIndex = 1000;
    el.style.boxShadow = "0 2px 12px #0002";
    el.style.fontSize = "1.1em";
    document.body.appendChild(el);
  }
  el.innerHTML = msg;
  el.style.display = "block";
  clearTimeout(el._timer);
  el._timer = setTimeout(() => { el.style.display = "none"; }, 1800);
}

// ===== SISTEMA PROFESIONAL DE UI =====

/**
 * Muestra un modal profesional (reemplaza alert)
 * @param {string} message - Mensaje a mostrar
 * @param {string} type - Tipo: 'info', 'success', 'warning', 'error'
 * @param {string} title - TÃ­tulo del modal (opcional)
 */
function showModal(message, type = 'info', title = '') {
  return new Promise((resolve) => {
    // Remover modal existente si hay
    const existing = document.querySelector('.ems-modal-overlay');
    if (existing) existing.remove();

    // Ãconos por tipo
    const icons = {
      info: 'â„¹ï¸',
      success: 'âœ“',
      warning: 'âš ï¸',
      error: 'âœ•'
    };

    // TÃ­tulos por defecto
    const titles = {
      info: 'InformaciÃ³n',
      success: 'Ã‰xito',
      warning: 'Advertencia',
      error: 'Error'
    };

    const overlay = document.createElement('div');
    overlay.className = 'ems-modal-overlay';
    overlay.setAttribute('role', 'dialog');
    overlay.setAttribute('aria-modal', 'true');
    overlay.setAttribute('aria-labelledby', 'modal-title');

    overlay.innerHTML = `
      <div class="ems-modal">
        <div class="ems-modal-header">
          <div class="ems-modal-icon ${type}">${icons[type]}</div>
          <h3 class="ems-modal-title" id="modal-title">${title || titles[type]}</h3>
        </div>
        <div class="ems-modal-body">${message}</div>
        <div class="ems-modal-footer">
          <button class="ems-modal-btn primary" autofocus>Aceptar</button>
        </div>
      </div>
    `;

    document.body.appendChild(overlay);

    const closeModal = () => {
      overlay.style.opacity = '0';
      setTimeout(() => {
        overlay.remove();
        resolve(true);
      }, 200);
    };

    overlay.querySelector('.ems-modal-btn').addEventListener('click', closeModal);
    overlay.addEventListener('click', (e) => {
      if (e.target === overlay) closeModal();
    });

    // ESC para cerrar
    const handleEsc = (e) => {
      if (e.key === 'Escape') {
        closeModal();
        document.removeEventListener('keydown', handleEsc);
      }
    };
    document.addEventListener('keydown', handleEsc);
  });
}

/**
 * Muestra un modal de confirmaciÃ³n (reemplaza confirm)
 * @param {string} message - Mensaje a mostrar
 * @param {string} title - TÃ­tulo del modal
 */
function showConfirm(message, title = 'Confirmar') {
  return new Promise((resolve) => {
    const existing = document.querySelector('.ems-modal-overlay');
    if (existing) existing.remove();

    const overlay = document.createElement('div');
    overlay.className = 'ems-modal-overlay';
    overlay.setAttribute('role', 'dialog');
    overlay.setAttribute('aria-modal', 'true');

    overlay.innerHTML = `
      <div class="ems-modal">
        <div class="ems-modal-header">
          <div class="ems-modal-icon warning">âš ï¸</div>
          <h3 class="ems-modal-title">${title}</h3>
        </div>
        <div class="ems-modal-body">${message}</div>
        <div class="ems-modal-footer">
          <button class="ems-modal-btn secondary">Cancelar</button>
          <button class="ems-modal-btn primary" autofocus>Confirmar</button>
        </div>
      </div>
    `;

    document.body.appendChild(overlay);

    const closeModal = (result) => {
      overlay.style.opacity = '0';
      setTimeout(() => {
        overlay.remove();
        resolve(result);
      }, 200);
    };

    const btns = overlay.querySelectorAll('.ems-modal-btn');
    btns[0].addEventListener('click', () => closeModal(false)); // Cancelar
    btns[1].addEventListener('click', () => closeModal(true));  // Confirmar

    overlay.addEventListener('click', (e) => {
      if (e.target === overlay) closeModal(false);
    });

    const handleEsc = (e) => {
      if (e.key === 'Escape') {
        closeModal(false);
        document.removeEventListener('keydown', handleEsc);
      }
    };
    document.addEventListener('keydown', handleEsc);
  });
}

/**
 * Muestra una notificaciÃ³n toast (no bloqueante)
 * @param {string} message - Mensaje
 * @param {string} type - 'success', 'error', 'info', 'warning'
 * @param {number} duration - DuraciÃ³n en ms (default 3000)
 */
function showToast(message, type = 'info', duration = 3000) {
  const toast = document.createElement('div');
  toast.className = `ems-toast ${type}`;
  toast.setAttribute('role', 'status');
  toast.setAttribute('aria-live', 'polite');

  const icons = {
    success: 'âœ“',
    error: 'âœ•',
    info: 'â„¹ï¸',
    warning: 'âš ï¸'
  };

  toast.innerHTML = `<span style="font-size:1.2em;">${icons[type]}</span> ${message}`;
  document.body.appendChild(toast);

  // Trigger animation
  setTimeout(() => toast.classList.add('show'), 10);

  // Auto remove
  setTimeout(() => {
    toast.classList.remove('show');
    setTimeout(() => toast.remove(), 300);
  }, duration);
}

/**
 * Inicializa el indicador de estado de red
 */
function initNetworkStatus() {
  const statusBar = document.getElementById('network-status');
  if (!statusBar) return;

  const statusText = statusBar.querySelector('.status-text');

  const updateStatus = () => {
    const online = navigator.onLine;
    if (online) {
      statusBar.classList.add('online');
      statusBar.classList.remove('show');
      statusText.textContent = 'âœ“ ConexiÃ³n restaurada';
      setTimeout(() => statusBar.classList.remove('show'), 2000);
    } else {
      statusBar.classList.remove('online');
      statusBar.classList.add('show');
      statusText.textContent = 'âš ï¸ Sin conexiÃ³n a Internet';
    }
  };

  window.addEventListener('online', () => {
    updateStatus();
    showToast('ConexiÃ³n a Internet restaurada', 'success');
  });

  window.addEventListener('offline', () => {
    updateStatus();
    showToast('Sin conexiÃ³n a Internet', 'error', 5000);
  });

  // Check initial status
  updateStatus();
}

/**
 * Valida un input y muestra estado visual
 * @param {HTMLElement} input - El input a validar
 * @param {boolean} isValid - Si es vÃ¡lido
 * @param {string} errorMsg - Mensaje de error (opcional)
 */
function validateInput(input, isValid, errorMsg = '') {
  if (!input) return;

  // Remover estado previo
  input.classList.remove('error', 'success');
  const prevError = input.parentElement?.querySelector('.error-message');
  if (prevError) prevError.remove();

  if (isValid) {
    input.classList.add('success');
    setTimeout(() => input.classList.remove('success'), 2000);
  } else {
    input.classList.add('error');
    if (errorMsg) {
      const errorDiv = document.createElement('div');
      errorDiv.className = 'error-message';
      errorDiv.innerHTML = `<span>âœ•</span> ${errorMsg}`;
      errorDiv.setAttribute('role', 'alert');
      input.parentElement?.appendChild(errorDiv);
    }
  }
}

// Inicializar cuando el DOM estÃ© listo
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initNetworkStatus);
} else {
  initNetworkStatus();
}

// ===== SISTEMA DE VISTA PREVIA DE PDF =====

// Variable global para el overlay actual
let currentPDFPreviewOverlay = null;

/**
 * Muestra un PDF en el visor de vista previa
 * @param {Uint8Array} pdfBytes - Bytes del PDF generado
 * @param {string} title - TÃ­tulo del documento
 * @param {Function} onRefresh - FunciÃ³n a llamar al refrescar
 */
function mostrarVisorPDF(pdfBytes, title, onRefresh) {
  // Cerrar visor existente si hay
  if (currentPDFPreviewOverlay) {
    currentPDFPreviewOverlay.remove();
  }

  // Crear blob y URL del PDF con parÃ¡metro #view=FitH para forzar vista inline
  const blob = new Blob([pdfBytes], { type: 'application/pdf' });
  const url = URL.createObjectURL(blob) + '#view=FitH&toolbar=1&navpanes=0';

  // Crear overlay
  const overlay = document.createElement('div');
  overlay.className = 'ems-pdf-preview-overlay';
  overlay.setAttribute('role', 'dialog');
  overlay.setAttribute('aria-modal', 'true');
  overlay.setAttribute('aria-label', 'Vista previa del PDF');

  // Usar object en lugar de iframe para mejor soporte en mÃ³viles
  overlay.innerHTML = `
    <div class="ems-pdf-preview-header">
      <div class="ems-pdf-preview-title">
        <i class="fa fa-file-pdf"></i>
        ${title}
        <span class="ems-pdf-preview-badge">Vista Previa</span>
      </div>
      <div class="ems-pdf-preview-actions">
        <button class="ems-pdf-preview-btn refresh" id="pdf-preview-refresh">
          <i class="fa fa-sync"></i> Actualizar
        </button>
        <button class="ems-pdf-preview-btn close" id="pdf-preview-close">
          <i class="fa fa-times"></i> Cerrar
        </button>
      </div>
    </div>
    <div class="ems-pdf-preview-container" style="position: relative;">
      <div class="ems-pdf-preview-loading" id="pdf-preview-loading" style="display:none;">
        <div class="ems-pdf-preview-spinner"></div>
        <div class="ems-pdf-preview-loading-text">Actualizando...</div>
      </div>
      <object class="ems-pdf-preview-iframe" id="pdf-preview-iframe" data="${url}" type="application/pdf" title="Vista previa del PDF">
        <iframe src="${url}" class="ems-pdf-preview-iframe" title="Vista previa del PDF"></iframe>
      </object>
    </div>
  `;

  document.body.appendChild(overlay);
  currentPDFPreviewOverlay = overlay;

  const loading = overlay.querySelector('#pdf-preview-loading');

  // BotÃ³n cerrar
  const closeBtn = overlay.querySelector('#pdf-preview-close');
  closeBtn.addEventListener('click', () => {
    URL.revokeObjectURL(url);
    overlay.remove();
    currentPDFPreviewOverlay = null;
  });

  // BotÃ³n refrescar
  const refreshBtn = overlay.querySelector('#pdf-preview-refresh');
  refreshBtn.addEventListener('click', async () => {
    if (onRefresh) {
      loading.style.display = 'flex';
      try {
        await onRefresh();
      } catch (e) {
        showModal('Error al actualizar la vista previa: ' + (e.message || e), 'error');
      }
    }
  });

  // ESC para cerrar
  const handleEsc = (e) => {
    if (e.key === 'Escape') {
      closeBtn.click();
      document.removeEventListener('keydown', handleEsc);
    }
  };
  document.addEventListener('keydown', handleEsc);

  // Cleanup cuando se cierre
  overlay.addEventListener('DOMNodeRemoved', () => {
    URL.revokeObjectURL(url);
    document.removeEventListener('keydown', handleEsc);
  });
}

/**
 * Genera y muestra vista previa de cotizaciÃ³n
 * Usa menor calidad de imagen para velocidad
 */
async function previsualizarPDFCotizacion() {
  try {
    // Mostrar indicador de carga
    showProgress(true, 20, "Generando vista previa rÃ¡pida...");

    const pdfBytes = await generarPDFCotizacion(false, true); // false = no compartir, true = preview

    showProgress(false);

    if (pdfBytes) {
      mostrarVisorPDF(pdfBytes, 'CotizaciÃ³n - Vista Previa', previsualizarPDFCotizacion);
      showToast('Vista previa generada', 'success', 2000);
    } else {
      showModal('No se pudo generar la vista previa', 'error');
    }
  } catch (e) {
    showProgress(false);
    showModal('Error al generar vista previa: ' + (e.message || e), 'error');
    console.error('Error en vista previa:', e);
  }
}

/**
 * Genera y muestra vista previa de reporte
 * Usa menor calidad de imagen para velocidad
 */
async function previsualizarPDFReporte() {
  try {
    // Mostrar indicador de carga
    showProgress(true, 20, "Generando vista previa rÃ¡pida...");

    const pdfBytes = await generarPDFReporte(false, true); // false = no compartir, true = preview

    showProgress(false);

    if (pdfBytes) {
      mostrarVisorPDF(pdfBytes, 'Reporte - Vista Previa', previsualizarPDFReporte);
      showToast('Vista previa generada', 'success', 2000);
    } else {
      showModal('No se pudo generar la vista previa', 'error');
    }
  } catch (e) {
    showProgress(false);
    showModal('Error al generar vista previa: ' + (e.message || e), 'error');
    console.error('Error en vista previa:', e);
  }
}

// --- Envoltura de texto por palabras (mÃ¡s estÃ©tica que por caracteres)
function wrapTextLines(text = "", font, fontSize, maxWidth) {
  const words = String(text || "").replace(/\s+/g, " ").trim().split(" ");
  const lines = [];
  let line = "";
  for (let i = 0; i < words.length; i++) {
    const test = (line ? line + " " : "") + words[i];
    if (font.widthOfTextAtSize(test, fontSize) <= maxWidth) {
      line = test;
    } else {
      if (line) lines.push(line);
      line = words[i];
    }
  }
  if (line) lines.push(line);
  return lines;
}

// ====== CompresiÃ³n de imÃ¡genes para PDFs ======
const __IMG_CACHE = new Map();
const PDF_IMG_DEFAULTS = { maxW: 1280, maxH: 1280, quality: 0.72 };

/**
 * Comprime/redimensiona una imagen remota o dataURL a JPEG.
 * Devuelve: ArrayBuffer con JPEG ya comprimido.
 */
async function compressImageToJpegArrayBuffer(src, { maxW, maxH, quality } = PDF_IMG_DEFAULTS) {
  const key = `${src}|${maxW}x${maxH}|q${quality}`;
  if (__IMG_CACHE.has(key)) return __IMG_CACHE.get(key);

  let blob;
  if (src.startsWith('data:')) {
    const res = await fetch(src);
    blob = await res.blob();
  } else {
    const res = await fetch(src, { mode: 'cors' });
    if (!res.ok) throw new Error('No se pudo cargar imagen: ' + src);
    blob = await res.blob();
  }

  const bitmap = await createImageBitmap(blob);
  const { width, height } = bitmap;
  const scale = Math.min(maxW / width, maxH / height, 1); // nunca agrandar
  const w = Math.max(1, Math.round(width * scale));
  const h = Math.max(1, Math.round(height * scale));

  let outBlob;
  if (typeof OffscreenCanvas !== 'undefined') {
    const canvas = new OffscreenCanvas(w, h);
    const ctx = canvas.getContext('2d', { alpha: false });
    ctx.drawImage(bitmap, 0, 0, w, h);
    outBlob = await canvas.convertToBlob({ type: 'image/jpeg', quality });
  } else {
    const canvas = document.createElement('canvas');
    canvas.width = w; canvas.height = h;
    const ctx = canvas.getContext('2d', { alpha: false });
    ctx.drawImage(bitmap, 0, 0, w, h);
    outBlob = await new Promise(res => canvas.toBlob(res, 'image/jpeg', quality));
  }

  const arrBuf = await outBlob.arrayBuffer();
  __IMG_CACHE.set(key, arrBuf);
  return arrBuf;
}

function isIOS() {
  return /iPad|iPhone|iPod/.test(navigator.userAgent);
}

// ====== Predictivos Firestore ======
async function savePredictEMSCloud(tipo, valor, user = "general") {
  if (!valor || valor.length < 2) return;
  const docRef = db.collection("predictEMS").doc(user);
  const snap = await docRef.get();
  let data = snap.data() || {};
  if (!data[tipo]) data[tipo] = [];
  if (!data[tipo].includes(valor)) data[tipo].unshift(valor);
  if (data[tipo].length > 30) data[tipo] = data[tipo].slice(0, 30);
  await docRef.set(data, { merge: true });
}
async function getPredictEMSCloud(tipo, user = "general") {
  const docRef = db.collection("predictEMS").doc(user);
  let data = (await docRef.get()).data() || {};
  return data[tipo] || [];
}
async function actualizarPredictsEMSCloud(user = "general") {
  let conceptos = await getPredictEMSCloud("concepto", user);
  let unidades = await getPredictEMSCloud("unidad", user);
  let clientes = await getPredictEMSCloud("cliente", user);
  let descs    = await getPredictEMSCloud("descripcion", user);

  const datalistConceptos = document.getElementById("conceptosEMS");
  if (datalistConceptos) datalistConceptos.innerHTML = conceptos.map(v=>`<option value="${v}">`).join('');
  const datalistUnidades = document.getElementById("unidadesEMS");
  if (datalistUnidades) datalistUnidades.innerHTML = unidades.map(v=>`<option value="${v}">`).join('');
  const datalistClientes = document.getElementById("clientesEMS");
  if (datalistClientes) datalistClientes.innerHTML = clientes.map(v=>`<option value="${v}">`).join('');
  const datalistDesc = document.getElementById("descEMS");
  if (datalistDesc) datalistDesc.innerHTML = descs.map(v=>`<option value="${v}">`).join('');
}
function activarPredictivosInstantaneos() {
  document.querySelectorAll('input[name="concepto"]').forEach(input => {
    if (!input.hasAttribute('data-predictivo')) {
      input.setAttribute('data-predictivo', '1');
      input.addEventListener('blur', () => savePredictEMSCloud('concepto', input.value));
    }
  });
  document.querySelectorAll('input[name="unidad"]').forEach(input => {
    if (!input.hasAttribute('data-predictivo')) {
      input.setAttribute('data-predictivo', '1');
      input.addEventListener('blur', () => savePredictEMSCloud('unidad', input.value));
    }
  });
  document.querySelectorAll('input[name="cliente"]').forEach(input => {
    if (!input.hasAttribute('data-predictivo')) {
      input.setAttribute('data-predictivo', '1');
      input.addEventListener('blur', () => savePredictEMSCloud('cliente', input.value));
    }
  });
  document.querySelectorAll('textarea[name="descripcion"]').forEach(input => {
    if (!input.hasAttribute('data-predictivo')) {
      input.setAttribute('data-predictivo', '1');
      input.addEventListener('blur', () => savePredictEMSCloud('descripcion', input.value));
    }
  });
}

// --------- RenderizaciÃ³n de interfaz ---------
function renderInicio() {
  if (window.autoSaveTimer) clearInterval(window.autoSaveTimer);
  fotosItemsReporteMap = {};
  fotosCotizacion = [];
  document.getElementById("root").innerHTML = `
    <div class="ems-header">
      <img src="${LOGO_URL}" class="ems-logo">
      <div style="flex:1">
        <h1>Electromotores Santana</h1>
        <span class="ems-subtitle">Cotizaciones y Reportes</span>
      </div>
      <button class="btn-mini" style="margin-left:auto" title="Ajustes" onclick="openSettings()">
        <i class="fa fa-gear"></i>
      </button>
    </div>
    <div class="ems-main-btns">
      <button onclick="nuevaCotizacion()" class="btn-primary"><i class="fa fa-file-invoice"></i> Nueva CotizaciÃ³n</button>
      <button onclick="nuevoReporte()" class="btn-secondary"><i class="fa fa-clipboard-list"></i> Nuevo Reporte</button>
    </div>
    <div class="ems-historial">
      <div class="ems-historial-header">
        <h2><i class="fa fa-clock"></i> Recientes</h2>
        <input type="text" id="buscarEMS" placeholder="Buscar por cliente, nÃºmero o fecha...">
      </div>
      <div id="historialEMS" class="ems-historial-list"></div>
    </div>
    <div class="ems-credit">Programado por: Francisco LÃ³pez VelÃ¡zquez.</div>
  `;
  cargarHistorialEMS();
}

window.onload = () => {
  renderInicio();
  // Modo app-like: bloquear atrÃ¡s y menÃºs contextuales globales
  try {
    if (!history.state || !history.state.ems) history.replaceState({ems:'root'}, '');
    window.addEventListener('popstate', function(e){ e.preventDefault(); history.pushState({ems:'root'}, ''); });
    document.addEventListener('contextmenu', function(e){
      const tag = (e.target && e.target.tagName) || '';
      if (tag !== 'INPUT' && tag !== 'TEXTAREA') e.preventDefault();
    }, true);
  } catch (e) {}
  try { applyThemeFromSettings(); } catch {}
  try { typeof showOffline === "function" && showOffline(true); } catch {}
  try { installUndoHandlers(); } catch {}
  try { schedulePendingNotifications(); } catch {}
};

let ASYNC_ERR_GUARD = false;

// ===== Notificaciones esporÃ¡dicas de pendientes =====
function schedulePendingNotifications() {
  const MIN_MINUTES = 15; // mÃ­nimo cada 15 min
  const JITTER_MIN  = 10; // Â±10 min aleatorio
  const keyLast = 'EMS_LAST_PENDING_NOTIFY';
  const keyCounts = 'EMS_LAST_PENDING_COUNTS';

  async function notify(msg) {
    try {
      if ('Notification' in window) {
        if (Notification.permission === 'default') {
          try { await Notification.requestPermission(); } catch {}
        }
        if (Notification.permission === 'granted') {
          new Notification('EMS', { body: msg });
          return;
        }
      }
    } catch {}
    try { showToast(msg, 'info', 5000); } catch {}
  }

  async function checkNow() {
    try {
      const last = Number(localStorage.getItem(keyLast) || '0');
      const now = Date.now();
      if (now - last < MIN_MINUTES * 60000) return; // demasiado pronto

      // Consultas: estado='pendiente' o pendiente=true (dos consultas simples)
      let cotPend = 0, repPend = 0;
      try {
        const q1 = await db.collection('cotizaciones').where('estado','==','pendiente').limit(20).get();
        cotPend += q1.size;
      } catch {}
      try {
        const q2 = await db.collection('cotizaciones').where('pendiente','==',true).limit(20).get();
        cotPend = Math.max(cotPend, q2.size);
      } catch {}
      try {
        const q3 = await db.collection('reportes').where('estado','==','pendiente').limit(20).get();
        repPend += q3.size;
      } catch {}
      try {
        const q4 = await db.collection('reportes').where('pendiente','==',true).limit(20).get();
        repPend = Math.max(repPend, q4.size);
      } catch {}

      const prev = JSON.parse(localStorage.getItem(keyCounts) || '{"cot":0,"rep":0}');
      // Notificar solo si hay al menos 1 y cambiÃ³ vs Ãºltima vez
      if (cotPend > 0 && cotPend !== Number(prev.cot||0)) {
        await notify(`Tienes ${cotPend} cotizaciÃ³n(es) pendiente(s).`);
      }
      if (repPend > 0 && repPend !== Number(prev.rep||0)) {
        await notify(`Tienes ${repPend} reporte(s) pendiente(s).`);
      }
      localStorage.setItem(keyCounts, JSON.stringify({ cot: cotPend, rep: repPend }));
      localStorage.setItem(keyLast, String(now));
    } catch {}
  }

  // primera comprobaciÃ³n diferida
  setTimeout(checkNow, 5000);

  // programar siguientes con jitter
  (function loop() {
    const jitter = (Math.random() * (JITTER_MIN * 2) - JITTER_MIN) * 60000; // Â±JITTER
    const delay = MIN_MINUTES * 60000 + Math.max(-JITTER_MIN*60000, Math.min(jitter, JITTER_MIN*60000));
    setTimeout(async () => { await checkNow(); loop(); }, delay);
  })();
}

// ==== Historial ====
async function cargarHistorialEMS(filtro = "") {
  const cont = document.getElementById("historialEMS");
  if (!cont) return;
  cont.innerHTML = "<div class='ems-historial-cargando'>Cargando...</div>";
  let cotSnap = [], repSnap = [];
  try {
    cotSnap = await db.collection("cotizaciones").orderBy("creada", "desc").limit(20).get();
    repSnap = await db.collection("reportes").orderBy("creada", "desc").limit(20).get();
  } catch {
    cont.innerHTML = "<div class='ems-historial-vacio'>No se pudo cargar historial (offline)</div>";
    return;
  }
  let items = [];
  cotSnap.forEach(doc => items.push({ ...doc.data(), id: doc.id }));
  repSnap.forEach(doc => items.push({ ...doc.data(), id: doc.id }));

  if (filtro && filtro.length > 0) {
    items = items.filter(x =>
      (x.cliente || "").toLowerCase().includes(filtro.toLowerCase()) ||
      (x.numero || "").toLowerCase().includes(filtro.toLowerCase()) ||
      (x.fecha || "").toLowerCase().includes(filtro.toLowerCase())
    );
  }
  items.sort((a, b) => (b.creada || "") > (a.creada || "") ? 1 : -1);
  if (items.length === 0) {
    cont.innerHTML = "<div class='ems-historial-vacio'>No hay cotizaciones ni reportes.</div>";
    return;
  }
  cont.innerHTML = items.slice(0, 20).map(x => `
    <div class="ems-card-ems ${x.tipo === "cotizacion" ? "ems-cotizacion" : "ems-reporte"}" onclick="abrirDetalleEMS('${x.tipo}', '${x.numero}')">
      <div class="ems-card-ico"><i class="fa ${x.tipo === "cotizacion" ? "fa-file-invoice" : "fa-clipboard-list"}"></i></div>
      <div class="ems-card-main">
        <div class="ems-card-tipo">${x.tipo === "cotizacion" ? "CotizaciÃ³n" : "Reporte"}</div>
        <div class="ems-card-cliente"><b>${x.cliente || ""}</b></div>
        <div class="ems-card-fecha">${x.fecha || ""} ${x.hora ? "â€” " + x.hora : ""}</div>
        <div class="ems-card-numero">#${x.numero || ""}</div>
      </div>
      <div class="ems-card-ir"><i class="fa fa-chevron-right"></i></div>
    </div>
  `).join("");
}
document.addEventListener("input", e => {
  if (e.target && e.target.id === "buscarEMS") {
    cargarHistorialEMS(e.target.value);
  }
});

// ========== CotizaciÃ³n ==========
function renderCotItemRow(item = {}) {
  return `
    <tr>
      <td>
        <input type="text" name="concepto" list="conceptosEMS" value="${item.concepto||""}" required autocomplete="off">
        <datalist id="conceptosEMS"></datalist>
      </td>
      <td>
        <input type="text" name="unidad" list="unidadesEMS" value="${item.unidad||""}" required autocomplete="off">
        <datalist id="unidadesEMS"></datalist>
      </td>
      <td>
        <input type="number" name="cantidad" min="0" value="${item.cantidad||""}" required>
      </td>
      <td style="white-space:nowrap;display:flex;align-items:center;">
        <span style="margin-right:4px;color:#13823b;font-weight:bold;">$</span>
        <input type="number" name="precio" min="0" step="0.01" value="${item.precio||""}" required style="width:90px;">
      </td>
      <td>
        <button type="button" class="btn-mini" onclick="eliminarCotItemRow(this)"><i class="fa fa-trash"></i></button>
      </td>
    </tr>
  `;
}
function agregarCotItemRow() {
  const tbody = document.getElementById('itemsTable').querySelector('tbody');
  tbody.insertAdjacentHTML('beforeend', renderCotItemRow());
  agregarDictadoMicros();
  activarPredictivosInstantaneos();
}
function eliminarCotItemRow(btn) {
  btn.closest('tr').remove();
}

function toggleCotMode(flag) {
  try {
    const s = getSettings();
    s.cotDetallado = !!flag;
    saveSettings(s);
    // Re-render conservando datos actuales
    const snap = serializeCotizacionForm();
    editarCotizacion({ ...snap, tipo: 'cotizacion' });
    showSaved(flag? 'Modo detallado activo' : 'Modo normal activo');
  } catch (e) { console.warn('toggleCotMode', e); }
}

// ========== NUEVO: Secciones de cotizaciÃ³n ==========
function renderCotSeccion(seccion = {}, rowId) {
  const id = rowId || newUID();
  const items = Array.isArray(seccion.items) ? seccion.items : [];
  const isDet = (getSettings()?.cotDetallado === true) || items.some(x=> x && (x.cantidad!==undefined || x.unidad!==undefined || x.precioUnit!==undefined));
  const itemsHtml = items.map(it => `
      <tr>
        <td><input type="text" name="concepto" value="${safe(it.concepto)}" list="conceptosEMS" autocomplete="off" spellcheck="true" autocapitalize="sentences"></td>
        <td><textarea name="descripcion" rows="2" placeholder="Detalle del concepto..." spellcheck="true" autocapitalize="sentences">${safe(it.descripcion)}</textarea></td>
        <td style="white-space:nowrap;display:flex;align-items:center;">
          <span style=\"margin-right:4px;color:#13823b;font-weight:bold;\">$</span>
          <input type="number" name="precioSec" min="0" step="0.01" value="${safe(it.precio)}" style="width:100px;">
          <button type="button" class="btn-mini" onclick="this.closest('tr').remove(); recalcSeccionSubtotal(this.closest('.cot-seccion'))"><i class="fa fa-trash"></i></button>
        </td>
      </tr>
  `).join('');
  return `
    <div class="cot-seccion" data-secid="${id}">
      <div class="cot-seccion-head">
        <input type="text" class="cot-sec-title" name="sec_titulo" placeholder="TÃ­tulo de secciÃ³n (ej. Refacciones, Mano de obra)" value="${safe(seccion.titulo)}">
        <div class="cot-sec-actions">
          <button type="button" class="btn-mini" onclick="agregarRubroEnSeccion(this)"><i class="fa fa-plus"></i> Agregar rubro</button>
          <button type="button" class="btn-mini" onclick="eliminarCotSeccion(this)"><i class="fa fa-trash"></i></button>
        </div>
      </div>
      <table class="ems-items-table cot-seccion-table">
        <thead>
          <tr>
            <th style="width:30%">Concepto</th>
            <th>DescripciÃ³n</th>
            <th style="width:180px">Precio</th>
          </tr>
        </thead>
        <tbody>
          ${itemsHtml}
        </tbody>
      </table>
      <div class="cot-seccion-subtotal"><span>Subtotal secciÃ³n:</span> <b class="cot-subtotal-val">$0.00</b></div>
    </div>
  `;
}
function agregarCotSeccion(preload = null) {
  const wrap = document.getElementById('cotSeccionesWrap');
  if (!wrap) return;
  const isDet = (getSettings()?.cotDetallado === true) || (preload && Array.isArray(preload.items) && preload.items.some(it=> it && (it.cantidad!==undefined || it.unidad!==undefined || it.precioUnit!==undefined)));
  const html = isDet ? renderCotSeccionDet(preload||{ items:[{},{},] }) : renderCotSeccion(preload||{ items:[{},{},] });
  wrap.insertAdjacentHTML('beforeend', html);
  agregarDictadoMicros();
  activarPredictivosInstantaneos();
  recalcTotalesCotizacion();
}

// Agregar sección detallada explícitamente desde UI
function agregarCotSeccionDet(preload = null) {
  const wrap = document.getElementById('cotSeccionesWrap');
  if (!wrap) return;
  wrap.insertAdjacentHTML('beforeend', renderCotSeccionDet(preload||{ items:[{},{},] }));
  agregarDictadoMicros();
  activarPredictivosInstantaneos();
  recalcTotalesCotizacion();
}
function eliminarCotSeccion(btn) {
  const sec = btn.closest('.cot-seccion');
  if (sec) { sec.remove(); recalcTotalesCotizacion(); }
}
function agregarRubroEnSeccion(btn) {
  const sec = btn.closest('.cot-seccion');
  if (!sec) return;
  const tbody = sec.querySelector('tbody');
  const isDet = (sec.getAttribute('data-mode') === 'det') || !!sec.querySelector('input[name="precioUnitSec"]');
  if (isDet) {
    tbody.insertAdjacentHTML('beforeend', `
      <tr>
        <td><input type="text" name="concepto" list="conceptosEMS" autocomplete="off" spellcheck="true" autocapitalize="sentences"></td>
        <td style="width:80px"><input type="number" name="cantidadSec" min="0" step="1" oninput="recalcSeccionSubtotal(this.closest('.cot-seccion'))"></td>
        <td style="width:100px"><input type="text" name="unidadSec" list="unidadesEMS" autocomplete="off"></td>
        <td style="white-space:nowrap;display:flex;align-items:center;">
          <span style=\"margin-right:4px;color:#13823b;font-weight:bold;\">$</span>
          <input type="number" name="precioUnitSec" min="0" step="0.01" style="width:100px;" oninput="recalcSeccionSubtotal(this.closest('.cot-seccion'))">
        </td>
        <td style="width:110px"><span class="cot-row-total">$0.00</span></td>
        <td><button type="button" class="btn-mini" onclick="this.closest('tr').remove(); recalcSeccionSubtotal(this.closest('.cot-seccion'))"><i class="fa fa-trash"></i></button></td>
      </tr>
    `);
  } else {
    tbody.insertAdjacentHTML('beforeend', `
      <tr>
        <td><input type="text" name="concepto" list="conceptosEMS" autocomplete="off" spellcheck="true" autocapitalize="sentences"></td>
        <td><textarea name="descripcion" rows="2" placeholder="Detalle del concepto..." spellcheck="true" autocapitalize="sentences"></textarea></td>
        <td style="white-space:nowrap;display:flex;align-items:center;">
          <span style=\"margin-right:4px;color:#13823b;font-weight:bold;\">$</span>
          <input type="number" name="precioSec" min="0" step="0.01" style="width:100px;">
          <button type="button" class="btn-mini" onclick="this.closest('tr').remove(); recalcSeccionSubtotal(this.closest('.cot-seccion'))"><i class="fa fa-trash"></i></button>
        </td>
      </tr>
    `);
  }
  agregarDictadoMicros();
  activarPredictivosInstantaneos();
  recalcSeccionSubtotal(sec);
}
function recalcSeccionSubtotal(sec) {
  if (!sec) return;
  const unitarios = Array.from(sec.querySelectorAll('input[name="precioUnitSec"]'));
  let subtotal = 0;
  if (unitarios.length) {
    const rows = Array.from(sec.querySelectorAll('tbody tr'));
    rows.forEach(tr => {
      const c = Number(tr.querySelector('input[name="cantidadSec"]')?.value||0);
      const pu = Number(tr.querySelector('input[name="precioUnitSec"]')?.value||0);
      const tot = c*pu;
      const span = tr.querySelector('.cot-row-total');
      if (span) span.textContent = mostrarPrecioLimpio(tot);
      subtotal += tot;
    });
  } else {
    const precios = Array.from(sec.querySelectorAll('input[name="precioSec"]'));
    subtotal = precios.reduce((a,inp)=>{
      const v = String(inp.value||"").trim();
      if (v===''||v==='.'||v==='-') return a;
      const n = Number(v); return a + (isNaN(n)?0:n);
    },0);
  }
  const el = sec.querySelector('.cot-subtotal-val');
  if (el) el.textContent = mostrarPrecioLimpio(subtotal);
  return subtotal;
}
function recalcTotalesCotizacion() {
  const sections = Array.from(document.querySelectorAll('#cotSeccionesWrap .cot-seccion'));
  let subtotal = 0;
  sections.forEach(sec => subtotal += recalcSeccionSubtotal(sec) || 0);
  const form = document.getElementById('cotForm');
  if (!form) return;
  const incluyeIVA = form.incluyeIVA && form.incluyeIVA.checked;
  const iva = incluyeIVA ? subtotal * 0.16 : 0;
  const total = subtotal + iva;
  const box = document.getElementById('cotResumenTotales');
  if (box) {
    box.querySelector('.cot-res-sub').textContent = mostrarPrecioLimpio(subtotal);
    box.querySelector('.cot-res-iva').textContent = mostrarPrecioLimpio(iva);
    box.querySelector('.cot-res-tot').textContent = mostrarPrecioLimpio(total);
  }
}

// === Fotos de COTIZACIÃ“N (Cloudinary, mÃ¡x 5) ===
async function subirFotosCot(input) {
  if (!input.files || input.files.length === 0) return;
  const cupo = 5 - (fotosCotizacion?.length || 0);
  if (cupo <= 0) { showModal("MÃ¡ximo 5 imÃ¡genes permitidas.", "warning"); input.value = ""; return; }

  const files = Array.from(input.files).slice(0, cupo);
  input.disabled = true;
  showProgress(true, 5, `Preparando subida (${files.length})...`);

  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    if (!file.type.startsWith("image/")) continue;
    const pct = Math.round(((i) / Math.max(1, files.length)) * 80) + 10;
    showProgress(true, pct, `Subiendo imagen ${i+1} de ${files.length}...`);
    const formData = new FormData();
    formData.append('file', file);
    formData.append('upload_preset', CLOUDINARY_PRESET);

    try {
      const res = await fetch(`https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD}/image/upload`, {
        method: 'POST',
        body: formData
      });
      const data = await res.json();
      if (data.secure_url) {
        if (fotosCotizacion.length < 5) fotosCotizacion.push(data.secure_url);
      } else {
        showModal("No se pudo subir la imagen a Cloudinary. Intenta nuevamente.", "error");
      }
    } catch (e) {
      showModal("Error al subir la imagen: " + (e.message || "Error desconocido"), "error");
    }
  }

  renderCotFotosPreview();
  input.disabled = false;
  input.value = "";
  showProgress(false, 100, "Listo");

  try { guardarCotizacionDraft(); } catch(e) {}
}
function renderCotFotosPreview() {
  const cont = document.getElementById('cotFotosPreview');
  if (!cont) return;
  const fotos = fotosCotizacion || [];
  let html = '';
  for (let i = 0; i < fotos.length; i += 2) {
    html += `<div class="ems-rep-fotos-pair">`;
    for (let j = i; j < i + 2 && j < fotos.length; ++j) {
      html += `
        <div class="ems-rep-foto">
          <img src="${fotos[j]}" style="width:120px;height:120px;object-fit:cover;border-radius:8px;border:1px solid #dbe2ea;display:block;margin:auto;">
          <button type="button" class="ems-btn-delimg" title="Eliminar" onclick="eliminarFotoCot(${j})"><i class="fa fa-trash"></i></button>
        </div>
      `;
    }
    html += `</div>`;
  }
  html += `<div style="font-size:0.92em; color:#888;">${Math.max(0, 5 - fotos.length)} fotos disponibles</div>`;
  cont.innerHTML = html;
}
function eliminarFotoCot(index) {
  fotosCotizacion.splice(index, 1);
  renderCotFotosPreview();
  try { guardarCotizacionDraft(); } catch(e) {}
}

function nuevaCotizacion() {
  // BotÃ³n de volver al inicio arriba
  let volverBtn = `
    <button class="btn-secondary" onclick="renderInicio()" style="margin-bottom:14px;">
      <i class="fa fa-arrow-left"></i> Volver al inicio
    </button>
  `;
  document.getElementById('root').innerHTML = volverBtn + `
    <div class="ems-header">
      <img src="${LOGO_URL}" class="ems-logo">
      <div>
        <h1>Electromotores Santana</h1>
        <span class="ems-subtitle">Nueva CotizaciÃ³n</span>
      </div>
      <button class="btn-mini" style="margin-left:auto" title="Ajustes" onclick="openSettings()">
        <i class="fa fa-gear"></i>
      </button>
    </div>
    <form id="cotForm" class="ems-form" autocomplete="off" oninput="recalcTotalesCotizacion()">
      <div class="ems-form-row">
        <div class="ems-form-group">
          <label>No. CotizaciÃ³n</label>
          <input type="text" name="numero" required placeholder="Ej. COT-2024-001">
        </div>
        <div class="ems-form-group">
          <label>Fecha</label>
          <input type="date" name="fecha" required value="${hoy()}">
        </div>
      </div>
      <div class="ems-form-row">
        <div class="ems-form-group">
          <label>Cliente</label>
          <div class="ems-form-input-icon">
            <input type="text" name="cliente" list="clientesEMS" required placeholder="Nombre o Empresa" autocomplete="off" spellcheck="true" autocapitalize="words">
            <button type="button" class="mic-btn" title="Dictar por voz"><i class="fa fa-microphone"></i></button>
          </div>
          <datalist id="clientesEMS"></datalist>
        </div>
        <div class="ems-form-group">
          <label>Hora</label>
          <input type="time" name="hora" value="${ahora()}">
        </div>
      </div>
      <div class="ems-form-row">
        <div class="ems-form-group">
          <label>Incluir IVA (16%)</label>
          <label class="ems-switch" aria-label="Incluir IVA (16%)">
            <input class="ems-toggle" id="incluyeIVA" type="checkbox" name="incluyeIVA">
            <span class="ems-switch-ui" aria-hidden="true"></span>
          </label>
        </div>
        <div class="ems-form-group">
          <label>Con anticipo</label>
          <label class="ems-switch" aria-label="Con anticipo">
            <input class="ems-toggle" id="anticipo" type="checkbox" name="anticipo" onchange="this.form.anticipoPorc.parentElement.style.display=this.checked?'':'none'">
            <span class="ems-switch-ui" aria-hidden="true"></span>
          </label>
          <div style="display:none"><input type="number" name="anticipoPorc" min="0" max="100" placeholder="% Anticipo"> %</div>
        </div>
        <div class="ems-form-group">
          <label>Mejorar redacciÃ³n con IA</label>
          <label class="ems-switch" aria-label="Mejorar redacciÃ³n con IA">
            <input class="ems-toggle" id="corrigeIA" type="checkbox" name="corrigeIA">
            <span class="ems-switch-ui" aria-hidden="true"></span>
          </label>
        </div>
      </div>
      <!-- SUPERTÃTULO GENERAL -->
      <div class="ems-form-group">
        <label>SupertÃ­tulo general del documento</label>
        <input type="text" name="titulo" placeholder="Ej: Motor de 5 HP, Rebobinado de alternador..." autocomplete="off" spellcheck="true" autocapitalize="sentences">
      </div>
      <!-- Secciones -->
      <div id="cotSeccionesWrap"></div>
      <div class="ems-sec-add">
      <button type="button" class="btn-secondary" onclick="agregarCotSeccion()"><i class="fa fa-list"></i> Agregar secciÃ³n</button>
        <button type="button" class="btn-secondary" onclick="agregarCotSeccionDet()"><i class="fa fa-table"></i> Seccion detallada</button>
        <small>Normal: concepto+descripcion+precio. Detallada: cantidad+unidad+precio unitario+total.</small>
      </div>



